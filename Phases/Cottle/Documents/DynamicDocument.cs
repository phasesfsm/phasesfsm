using System;
using System.IO;
using System.Linq;
using Cottle.Documents.Dynamic;
using Cottle.Settings;

namespace Cottle.Documents
{
	/// <summary>
	/// Dynamic document compiles template using MSIL generation for better
	/// performance. Code generated by JIT compiler can be reclaimed by garbage
	/// collector, but you should use a caching mechanism to avoid re-creating
	/// too many DynamicDocument instances using the same template source.
	/// </summary>
	public sealed class DynamicDocument : AbstractDocument
	{
		#region Attributes

		private readonly Function main;

		#endregion

		#region Constructors

		public DynamicDocument (TextReader reader, ISetting setting)
		{
			IParser parser = ParserFactory.BuildParser (setting);

			this.main = new Function (Enumerable.Empty<string> (), parser.Parse (reader), setting.Trimmer);
		}

		public DynamicDocument (TextReader reader) :
			this (reader, DefaultSetting.Instance)
		{
		}

		public DynamicDocument (string template, ISetting setting) :
			this (new StringReader (template), setting)
		{
		}

		public DynamicDocument (string template) :
			this (new StringReader (template), DefaultSetting.Instance)
		{
		}

		#endregion

		#region Methods

		public override Value Render (IStore store, TextWriter writer)
		{
			return this.main.Execute (null, store, writer);
		}

		public static void Save (TextReader reader, ISetting setting, string assemblyName, string fileName)
		{
			IParser parser = ParserFactory.BuildParser (setting);

			Function.Save (parser.Parse (reader), setting.Trimmer, assemblyName, fileName);
		}

		#endregion
	}
}
